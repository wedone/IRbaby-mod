# C++ 开发规范

## 代码风格与结构
- 编写简洁地道的现代 C++ 代码(C++17/20)
- 遵循现代 C++ 最佳实践与惯用法(Modern C++ Idioms)
- 合理运用 OOP/Procedural/Functional 范式
- 优先使用 STL 和标准算法(Standard Algorithms)处理集合操作
- 使用描述性命名(如 `isUserSignedIn`, `calculateTotal`)
- 采用头文件(*.hpp)与实现文件(*.cpp)分离架构

## 命名规范
- 类名：PascalCase(例：`UserManager`)
- 变量/方法名：camelCase(例：`currentUser`, `validateInput()`)
- 常量/宏：SCREAMING_SNAKE_CASE(例：`MAX_RETRY_COUNT`)
- 成员变量前缀：`_` 或 `m_`(例：`_userId`, `m_userId`)
- 使用 namespace 组织代码逻辑

## C++ 特性使用
- 优先使用 Modern C++ 特性(auto、range-based for、smart pointers)
- 使用 `std::unique_ptr`/`std::shared_ptr` 管理内存
- 使用 `std::optional`/`std::variant` 实现类型安全
- 用 `constexpr` 和 `const` 优化编译时计算
- 优先使用 `std::string_view` 处理只读字符串

## 语法与格式
- 遵循统一代码风格(如 Google C++ Style Guide)
- K&R 括号风格(控制结构的大括号与语句同行)
if (condition) {
    // ...
}
## 错误处理
- 使用 exceptions 处理错误(std::runtime_error)

- 通过 RAII 管理资源

- 在 function boundaries 验证输入

- 使用 logging 库(spdlog/Boost.Log)

## 性能优化
- 优先使用 stack-based 对象而非 heap allocation

- 使用 std::move 启用 move semantics

- 用 <algorithm> 优化循环(例：std::sort, std::transform)

- 使用 Valgrind/Perf 进行 profiling

## 核心规范
- 优先使用 smart pointers 而非 raw pointers

- 避免 global variables，谨慎使用 Singleton

- 使用 strongly-typed enums(enum class)

- 分离 interface 与 implementation

- 合理使用 templates 和 metaprogramming

## 测试规范
- 使用 Google Test/Catch2 编写 unit tests

- 使用 Google Mock 进行 mocking

- 实施 integration tests

## 安全规范
- 防范 buffer overflow/dangling pointers 等漏洞

- 优先使用 std::array/std::vector 替代 C-style arrays

- 使用 C++-style casts(static_cast<>)

- 保持 const-correctness

## 文档规范
- 为 class/method 编写 Doxygen 注释

- 生成 API 文档使用 Doxygen

- 记录代码前提条件(preconditions)和后置条件(postconditions)